# 1 "lexer.mll"
 

    open Parser
    exception Eof
    exception Invalid_Input   
    type matrix = float list list 

# 10 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\223\255\224\255\225\255\226\255\000\000\046\000\056\000\
    \230\255\000\000\232\255\233\255\234\255\235\255\236\255\000\000\
    \001\000\000\000\001\000\000\000\001\000\000\000\002\000\255\255\
    \245\255\012\000\248\255\000\000\254\255\000\000\003\000\000\000\
    \006\000\253\255\242\255\239\255\028\000\252\255\039\000\051\000\
    \039\000\035\000\251\255\056\000\034\000\037\000\044\000\040\000\
    \048\000\043\000\249\255\053\000\246\255\001\000\243\255\043\000\
    \054\000\240\255\237\255\046\000\070\000\071\000\052\000\054\000\
    \061\000\056\000\064\000\059\000\250\255\068\000\247\255\004\000\
    \244\255\058\000\070\000\241\255\238\255\229\255\106\000\116\000\
    \126\000";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\028\000\028\000\032\000\
    \255\255\024\000\255\255\255\255\255\255\255\255\255\255\032\000\
    \032\000\032\000\032\000\032\000\032\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\000\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\013\000\000\000\007\000\010\000\007\000\078\000\000\000\
    \005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\009\000\008\000\000\000\077\000\000\000\000\000\
    \000\000\020\000\029\000\016\000\017\000\022\000\023\000\024\000\
    \054\000\036\000\030\000\072\000\032\000\018\000\027\000\059\000\
    \038\000\034\000\015\000\019\000\028\000\025\000\031\000\021\000\
    \035\000\026\000\033\000\012\000\078\000\011\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\037\000\039\000\044\000\041\000\046\000\042\000\
    \053\000\055\000\051\000\047\000\040\000\048\000\049\000\050\000\
    \043\000\056\000\052\000\058\000\057\000\060\000\045\000\062\000\
    \073\000\064\000\071\000\069\000\065\000\066\000\067\000\068\000\
    \074\000\070\000\076\000\061\000\075\000\000\000\000\000\000\000\
    \000\000\063\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\080\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\080\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\005\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\009\000\255\255\255\255\
    \255\255\000\000\018\000\000\000\000\000\020\000\022\000\021\000\
    \053\000\017\000\018\000\071\000\031\000\000\000\025\000\015\000\
    \016\000\030\000\000\000\000\000\027\000\019\000\018\000\020\000\
    \029\000\025\000\032\000\000\000\006\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\036\000\038\000\039\000\040\000\039\000\041\000\
    \044\000\043\000\045\000\046\000\038\000\047\000\048\000\049\000\
    \039\000\043\000\051\000\055\000\056\000\059\000\039\000\060\000\
    \061\000\060\000\062\000\063\000\064\000\065\000\066\000\067\000\
    \061\000\069\000\073\000\060\000\074\000\255\255\255\255\255\255\
    \255\255\060\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 11 "lexer.mll"
                     (ADD)
# 167 "lexer.ml"

  | 1 ->
# 12 "lexer.mll"
                     (SUBT)
# 172 "lexer.ml"

  | 2 ->
# 13 "lexer.mll"
                     (MULT)
# 177 "lexer.ml"

  | 3 ->
# 14 "lexer.mll"
                     (DIV)
# 182 "lexer.ml"

  | 4 ->
# 15 "lexer.mll"
                     (COUNT)
# 187 "lexer.ml"

  | 5 ->
# 16 "lexer.mll"
                     (ROWCOUNT)
# 192 "lexer.ml"

  | 6 ->
# 17 "lexer.mll"
                     (COLCOUNT)
# 197 "lexer.ml"

  | 7 ->
# 18 "lexer.mll"
                     (SUM)
# 202 "lexer.ml"

  | 8 ->
# 19 "lexer.mll"
                     (ROWSUM)
# 207 "lexer.ml"

  | 9 ->
# 20 "lexer.mll"
                     (COLSUM)
# 212 "lexer.ml"

  | 10 ->
# 21 "lexer.mll"
                     (AVG)
# 217 "lexer.ml"

  | 11 ->
# 22 "lexer.mll"
                     (ROWAVG)
# 222 "lexer.ml"

  | 12 ->
# 23 "lexer.mll"
                     (COLAVG)
# 227 "lexer.ml"

  | 13 ->
# 24 "lexer.mll"
                     (MIN)
# 232 "lexer.ml"

  | 14 ->
# 25 "lexer.mll"
                     (ROWMIN)
# 237 "lexer.ml"

  | 15 ->
# 26 "lexer.mll"
                     (COLMIN)
# 242 "lexer.ml"

  | 16 ->
# 27 "lexer.mll"
                     (MAX)
# 247 "lexer.ml"

  | 17 ->
# 28 "lexer.mll"
                     (ROWMAX)
# 252 "lexer.ml"

  | 18 ->
# 29 "lexer.mll"
                     (COLMAX)
# 257 "lexer.ml"

  | 19 ->
# 30 "lexer.mll"
                     (LPAREN)
# 262 "lexer.ml"

  | 20 ->
# 31 "lexer.mll"
                     (RPAREN)
# 267 "lexer.ml"

  | 21 ->
# 32 "lexer.mll"
                     (LBRAC)
# 272 "lexer.ml"

  | 22 ->
# 33 "lexer.mll"
                     (RBRAC)
# 277 "lexer.ml"

  | 23 ->
# 34 "lexer.mll"
                     (COMMA)
# 282 "lexer.ml"

  | 24 ->
# 35 "lexer.mll"
                     (COLON)
# 287 "lexer.ml"

  | 25 ->
# 36 "lexer.mll"
                     (SEMICOLON)
# 292 "lexer.ml"

  | 26 ->
# 37 "lexer.mll"
                     (ASS)
# 297 "lexer.ml"

  | 27 ->
let
# 38 "lexer.mll"
                                                                              lx
# 303 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "lexer.mll"
                                                                                 (FLOAT(float_of_string lx))
# 307 "lexer.ml"

  | 28 ->
let
# 39 "lexer.mll"
                                              lm
# 313 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 39 "lexer.mll"
                                                 (INT(int_of_string lm))
# 317 "lexer.ml"

  | 29 ->
# 40 "lexer.mll"
                          (token lexbuf)
# 322 "lexer.ml"

  | 30 ->
# 41 "lexer.mll"
                      (token lexbuf)
# 327 "lexer.ml"

  | 31 ->
# 42 "lexer.mll"
                     (raise Eof)
# 332 "lexer.ml"

  | 32 ->
# 43 "lexer.mll"
                     (raise Invalid_Input)
# 337 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

